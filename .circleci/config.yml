version: 2
common: &common
  machine:
    docker_layer_caching: true 
  working_directory: ~/amazonlinux-gdal
  steps:
    - checkout
    - attach_workspace:
        at: ~/amazonlinux-gdal
    - run: |
        echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
    - run:
        name: create amazonlinux:gdal image
        command: docker build -f base/gdal${GDAL_VERSION}/Dockerfile -t remotepixel/amazonlinux:gdal${GDAL_VERSION} .
    - run:
        name: create layers 
        command: |
          build-layer () {
              LAYER_NAME=$1
              echo "Building image with python ${PYTHON_VERSION}"
              docker build \
                --build-arg PYTHON_VERSION=${PYTHON_VERSION}\
                --build-arg GDAL_VERSION=${GDAL_VERSION} \
                -f layers/${LAYER_NAME}/Dockerfile \
                -t remotepixel/amazonlinux:gdal${GDAL_VERSION}-py${PYTHON_VERSION}-${LAYER_NAME} .
              
              echo "Creating aws lambda layer for python ${PYTHON_VERSION}"
              docker run \
                --name lambda \
                --volume $(pwd)/:/local \
                --env GDAL_VERSION=${GDAL_VERSION} \
                --env PYTHON_VERSION=${PYTHON_VERSION} \
                --env LAYER_NAME=${LAYER_NAME} \
                -itd remotepixel/amazonlinux:gdal${GDAL_VERSION}-py${PYTHON_VERSION}-${LAYER_NAME} bash
              docker cp ./scripts/create-lambda-layer.sh lambda:/tmp/create-layer.sh
              docker exec -it lambda bash -c '/tmp/create-layer.sh ${GDAL_VERSION} ${PYTHON_VERSION} ${LAYER_NAME}'
              docker stop lambda
              docker rm lambda
          }

          test-layer () {
            echo "Test layer for python ${PYTHON_VERSION}"
            LAYER_NAME=rasterio
            docker run \
                --name lambda \
                --volume $(pwd)/:/local \
                --env GDAL_DATA=/opt/share/gdal \
                --env PROJ_LIB=/opt/share/proj \
                --env GDAL_VERSION=${GDAL_VERSION} \
                --env PYTHON_VERSION=${PYTHON_VERSION} \
                --env PYTHONPATH=/opt/python:/var/runtime \
                -itd lambci/lambda:build-python${PYTHON_VERSION} bash
            docker cp ./layer-gdal${GDAL_VERSION}-py${PYTHON_VERSION}-${LAYER_NAME}.zip lambda:/tmp/layer.zip
            docker exec -it lambda bash -c 'unzip -q /tmp/layer.zip -d /opt/'
            driver=$(docker exec -it lambda python -c 'import rasterio; src = rasterio.open("https://oin-hotosm.s3.amazonaws.com/5ac626e091b5310010e0d482/0/5ac626e091b5310010e0d483.tif"); print(src.meta["driver"])')
            docker stop lambda
            docker rm lambda
            if [[ "$driver" =~ "GTiff" ]]; then echo "OK"; else exit 1; fi 
          }

          for PYTHON_VERSION in ${PYTHON_VERSIONS}; do
            build-layer "build"
            build-layer "rasterio"
            WITH_BINARIES=1 build-layer "full"
            test-layer
          done
    - persist_to_workspace:
        root: .
        paths:
          - layer-*.zip

jobs:
  "gdal-3.0":
    <<: *common
    environment:
      - GDAL_VERSION=3.0
      - PYTHON_VERSIONS=3.6 3.7

  # "gdal-2.4":
  #   <<: *common
  #   environment:
  #     - GDAL_VERSION=2.4
  #     - PYTHON_VERSION="3.6 3.7"

workflows:
  version: 2
  build_and_push:
    jobs:
      - "gdal-3.0"
      # - "gdal-2.4"